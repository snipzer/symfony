-Générer un projet
symfony new [project-name] [version]

-Lancer le server:
php app/console server:run
php app/console s:r

-Créer un bundle:
php app/console generate:bundle
php app/console g:b

-Créer la base de données avec doctrine
php app/console doctrine:database:create

-Générer les entitées doctrines
php app/console generate:doctrine:entity

-Valider les schema
php app/console doctrine:schema:validate

-Créer les tables quand le mapping est créer
php app/console doctrine:schema:create

-Lise à jour du schema
php app/console doctrine:schema:update [‐‐force] [‐‐dump‐sql]

-Genère un controleur qui a les méthodes de base pour manipuler des données
php app/console generate:doctrine:crud

-Installation des assets
php app/console assets:install [--symlink [--relative]]

-Encoder des mot de passe:
php bin/console security:encode-password

-Pour choisir l'environnement lors d'un lancement d'une commande
    *En production
        [-e prod]

  ================================
        ==========================


lifecycleCallbacks:
        prePersist: [onPrePersist] # See src/ShopBundle/Entity/Product::onPrePersist
        preUpdate: [onPreUpdate] # See src/ShopBundle/Entity/Product::onPreUpdate




use Behat\Transliterator\Transliterator;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Event\PreUpdateEventArgs;


/**
     * Pre persist (create only) event callback.
     *
     * Called by doctrine: see lifecycleCallbacks in the mapping file.
     * @see src/ShopBundle/Resources/config/doctrine/Product.orm.yml
     */
    public function onPrePersist()
    {
        $this->updateSlug();
    }

    /**
     * Pre update event callback.
     *
     * Called by doctrine: see lifecycleCallbacks in the mapping file.
     * @see src/ShopBundle/Resources/config/doctrine/Product.orm.yml
     *
     * @param PreUpdateEventArgs $event
     */
    public function onPreUpdate(PreUpdateEventArgs $event)
    {
        // The PreUpdateEventArgs allow us to track if some properties has been changed
        if ($event->hasChangedField('title')) {
            $this->updateSlug();
        }
    }

    /**
     * Updates the slug from the title.
     */
    private function updateSlug()
    {
        // Turns 'This is a great product' into 'this-is-a-great-product'
        $slug = Transliterator::urlize($this->getTitle());

        $this->setSlug($slug);
    }